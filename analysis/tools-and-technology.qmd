# Tools and Technologies {#sec-tools-tech}

In this section, we look at various tools and technologies in use by NSOs.

## Version Control System Usage {#sec-vcs}

Complex Analytical Systems, such as the systems used in monthly CPI Production, often need to synchronize and integrate multiple versions of related code, data, and documentation. This is especially important for creating reproducible analytical pipelines (@RAPsite), or enabling multiple individuals to work concurrently on the same project.

Version Control Systems (VCS) are tools that systematically manage changes in a codebase over time. At the time of writing, [Git](https://git-scm.com/) is by far the most popular software for this purpose, and platforms such as [Github](https://github.com/) and [GitLab](https://about.gitlab.com/) have built extensive functionality around projects managed with Git[^1].

[^1]: It is worth mentioning that git-adjacent software such as [Data Version Control](https://dvc.org/) and [Git Large File Storage](https://git-lfs.com/) exists to extend the versioning capabilities of Git to files you wouldn't typically commit to a Git repository. However, this is a more advanced topic that we did not investigate in this survey.


```{r message = FALSE}
#| echo: false
#| label: fig-comm-software
#| fig-cap: VCS used by survey respondents

library(dplyr)
library(ggplot2)

df <- read.csv("./data/results.csv")
df <- df[df[,2] != "",]

df <- df |> rename(
  use_open_source_pkg=colnames(df)[118],
  not_use_not_know=colnames(df)[120],
  not_use_insuff_doc=colnames(df)[121],
  not_use_code_not_maintain=colnames(df)[122],
  not_use_not_suitable=colnames(df)[123],
  not_use_not_integrate=colnames(df)[124],
  not_use_no_skills=colnames(df)[125],
  not_use_other=colnames(df)[126],
  vc_git=colnames(df)[137],
  vc_github=colnames(df)[138],
  vc_svn=colnames(df)[139],
  vc_hg=colnames(df)[140],
  vc_commercial=colnames(df)[141],
  vc_naming_convention=colnames(df)[142],
  vc_none=colnames(df)[143],
  vc_other=colnames(df)[144],
  pm_jira=colnames(df)[145],
  pm_gh_proj=colnames(df)[146],
  pm_gitlab_issue=colnames(df)[147],
  pm_share_excel=colnames(df)[148],
  pm_none=colnames(df)[149],
  pm_other=colnames(df)[150],
  cs_warehouse=colnames(df)[173],
  cs_sas=colnames(df)[174],
  cs_stata=colnames(df)[175],
  cs_matlab=colnames(df)[176],
  cs_spss=colnames(df)[177],
  cs_excel=colnames(df)[178],
  cs_pbi=colnames(df)[179],
  cs_access=colnames(df)[180],
  cs_none=colnames(df)[181],
  cs_other=colnames(df)[182]
)

# Version control
dat <- data.frame(
  Frequency = c(df$vc_git, df$vc_github, df$vc_svn, df$vc_hg, df$vc_commercial, df$vc_naming_convention, df$vc_none, df$vc_other),
  VCS = c(
    rep("Git", each=nrow(df)),
    rep("GitHub/GitLab", each=nrow(df)),
    rep("Subversion", each=nrow(df)),
    rep("Mercurial", each=nrow(df)),
    rep("Built-In Versioning", each=nrow(df)),
    rep("File Naming Conventions", each=nrow(df)),
    rep("None", each=nrow(df)),
    rep("Other", each=nrow(df))
  )
)

# Fill NA with zero
dat$Frequency = ifelse(dat$Frequency == "Yes", 1, 0)
ggplot(dat, aes(x=VCS, y=Frequency)) + geom_bar(stat="identity", fill="#F1502F") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Version Control Systems Used")

NUM_NONE_OR_FILE_NAMING_CONVENTION = sum(df$vc_none == "Yes" | df$vc_naming_convention == "Yes")

GIT_OR_GITHUB = sum(df$vc_git == "Yes" | df$vc_github == "Yes")

```

@fig-vcs shows the VCS used by respondent NSOs.

Surprisingly, the most common response by far was that the respondent did not use version control software at all for their CPI Production Systems. In fact, almost two thirds of the sample claims to use no VCS whatsoever or file-naming conventions[^2].

Our hypothesis here is that (1) some commonly used file formats (e.g., Excel Workbooks) don't lend themselves easily to well-established version control tools like Git and (2) a lack of familiarity with VCS tools in general.

Another interesting observation is that slightly less than one third of the sample uses Git and/or GitHub/GitLab[^3].

A very small fraction of the sample indicated using other version control software such as Mercurial, Subversion, or built-in versioning capabilities of another tool/platform.

Having both worked on non-trivial Complex Analytical Systems ourselves, we suspect that adopting industry standard VCS toolingap may greatly reduce the cognitive load for teams who are not currently using any VCS or are only using file-naming conventions to manage source code and documentation for Complex Analytical Systems[^4].

[^2]: What we mean by file naming conventions is encoding the author, version, and date information into the names of multiple files as the primary system of revision control. E.g., `analysis_collin_v1.py`, `analysis_steve_v2.py`, `analysis_collin_v2_final_2025_03.py`, `analysis_steve_v2_final_FINAL_2025_04.py`, and so on.

[^3]: We were surprised to find a small number of respondents indicated that they use Git but not a developer platform built around Git such as GitHub, GitLab, or BitBucket. We suspect that these individuals may work in an air-gapped network or similar situation without internet access and use Git locally without also using a tool like GitLab/GitHub.

[^4]: We believe that most people working on CPI Production Systems have the aptitude to learn Git. However, we acknowledge that the learning curve for Git is non-trivial. Our recommendation to readers who are interested is to [learn the basics](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository) and immediately put this knowledge into practice in your day-to-day activities. Over time, versioning files with Git will become second nature.

## Commercial Software

The next question we asked was which commercial software (if any) is used in each respondent's CPI Production systems.

```{r}
#| echo: false
#| label: fig-vcs
#| fig-cap: VCS used by survey respondents


# Version control
dat <- data.frame(
  Frequency = c(df$cs_warehouse, df$cs_sas, df$cs_stata, df$cs_matlab, df$cs_spss, df$cs_excel, df$cs_pbi, df$cs_access, df$cs_none, df$cs_other),
  Software = c(
    rep("Data Warehouse", each=nrow(df)),
    rep("SAS", each=nrow(df)),
    rep("Stata", each=nrow(df)),
    rep("MATLAB", each=nrow(df)),
    rep("SPSS", each=nrow(df)),
    rep("Excel", each=nrow(df)),
    rep("Power BI", each=nrow(df)),
    rep("MS Access", each=nrow(df)),
    rep("None", each=nrow(df)),
    rep("Other", each=nrow(df))
  )
)

# Fill NA with zero
dat$Frequency = ifelse(dat$Frequency == "Yes", 1, 0)
ggplot(dat, aes(x=Software, y=Frequency)) + geom_bar(stat="identity", fill="#1d6f42") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Commercial Software Used")
```
We were not overly surprised to learn that over two thirds of the respondents listed that Microsoft Excel was used in their CPI Production Systems.

Microsoft Excel satisfies a number of use cases for beginner-friendly tabular data analysis, however, it is not an ideal tool for expressing business logic in Complex Analytical Systems[^5]. Some of the key reasons for this include:

- Excel Workbooks are stored in a binary format rather than a plain text format, which doesn't integrate well with Version Control Systems.

- There isn't a well-defined entrypoint to an Excel Workbook (i.e., you can't "run" an Excel workbook the same way you can "run" `python main.py`).

- The business logic encoded into an Excel Workbook is often difficult to read and interpret for any non-trivial Workbook, making Excel Workbooks difficult to maintain as a unit of software.

- Excel Workbooks encourage a high degree of coupling between business logic and data[^6].

[^5]: Our criticism here applies to **all spreadsheet software**, not just Microsoft Excel. Our point is that spreadsheet workbooks are not an ideal unit of software for expressing business logic in Complex Analytical Systems.

[^6]: In other words, you can't easily "reuse" a piece of business logic from someone else's Excel Workbook in the way that you can reuse a piece of source code.

In a distant second to Microsoft Excel, we find SAS is the next most commonly used commercial product in CPI Production Systems.

```{r}
#| echo: false

# Project Management
dat <- data.frame(
  Frequency = c(df$pm_jira, df$pm_gh_proj, df$pm_gitlab_issue, df$pm_share_excel, df$pm_none, df$pm_other),
  Software = c(
    rep("Jira", each=nrow(df)),
    rep("GitHub Projects", each=nrow(df)),
    rep("GitLab Milestones", each=nrow(df)),
    rep("Shared Excel Workbook", each=nrow(df)),
    rep("None", each=nrow(df)),
    rep("Other", each=nrow(df))
  )
)

# Fill NA with zero
dat$Frequency = ifelse(dat$Frequency == "Yes", 1, 0)
ggplot(dat, aes(x=Software, y=Frequency)) + geom_bar(stat="identity", fill="#0052CC") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```


```{r message = FALSE}
#| echo: false

library(dplyr)
library(ggplot2)

df <- read.csv("./data/results.csv")
df <- df[df[,2] != "",]

df <- df |> rename(
  python=colnames(df)[151],
  r=colnames(df)[152],
  julia=colnames(df)[153],
  scala=colnames(df)[154],
  java=colnames(df)[155],
  csharp=colnames(df)[156],
  corcpp=colnames(df)[157],
  vb=colnames(df)[158],
  vba=colnames(df)[159],
  sas=colnames(df)[160],
  stata=colnames(df)[161],
  spss=colnames(df)[162],
  sql=colnames(df)[163],
  none=colnames(df)[164],
  other=colnames(df)[165]
)

# Version control
dat <- data.frame(
  Frequency = c(
    df$python,
    df$r,
    df$julia,
    df$scala,
    df$java,
    df$csharp,
    df$corcpp,
    df$vb,
    df$vba,
    df$sas,
    df$stata,
    df$spss,
    df$sql,
    df$none,
    df$other
  ),
  Language = c(
    rep("Python", each=nrow(df)),
    rep("R", each=nrow(df)),
    rep("Julia", each=nrow(df)),
    rep("Scala", each=nrow(df)),
    rep("Java", each=nrow(df)),
    rep("C#", each=nrow(df)),
    rep("C/C++", each=nrow(df)),
    rep("Visual Basic", each=nrow(df)),
    rep("Visual Basic Applications", each=nrow(df)),
    rep("SAS", each=nrow(df)),
    rep("Stata", each=nrow(df)),
    rep("SPSS", each=nrow(df)),
    rep("SQL", each=nrow(df)),
    rep("None", each=nrow(df)),
    rep("Other", each=nrow(df))
  )
)

# Fill NA with zero
dat$Frequency = ifelse(dat$Frequency == "Yes", 1, 0)
ggplot(dat, aes(x=Language, y=Frequency)) + geom_bar(stat="identity", fill="#FFE873") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```


