# Challenges {#sec-challenges}

We conclude the survey by asking respondents to rank the challenges they face with respect to system development and maintenance in general.

The survey question presented to respondents was as follows.

![Ranked Challenges Question](./diagrams/cpi-systems-challenge-question.png)
We show a stacked bar chart of the 5 most commonly cited challenges below.

```{r message = FALSE}
#| echo: false
#| warning: false
#| fig-cap: Challenges Faced (Rank 1 through 5)
#| out-width: "100%"

library(forcats)
library(dplyr)
library(ggplot2)

df <- read.csv("./data/results.csv")
df <- df[df[,2] != "",]

# Overall Challenges

df <- df |> rename(
  rank1=colnames(df)[242],
  rank2=colnames(df)[243],
  rank3=colnames(df)[244],
  rank4=colnames(df)[245],
  rank5=colnames(df)[246],
  rank6=colnames(df)[247],
  rank7=colnames(df)[248],
  rank8=colnames(df)[249],
  rank9=colnames(df)[250],
  rank10=colnames(df)[251],
  rank11=colnames(df)[252],
  rank12=colnames(df)[253],
  rank13=colnames(df)[254],
  rank14=colnames(df)[255],
  rank15=colnames(df)[256],
  rank16=colnames(df)[257],
)

# Shorten value names
df[df == "Lack of skills (e.g., people do not have the skills to maintain complex systems)."] = "Lack of Skills"

df[df == "Lots of manual tasks that are not automated/cannot be automated (e.g., a person has to manually review system outputs to validate them)."] = "Manual Tasks"

df[df == "Managing the interaction between systems (e.g., integration challenges, passing inputs/outputs between systems)."] = "System Interactions"

df[df == "Staff/resourcing challenges (e.g., not enough people to do the work, all of our time is spent maintaining existing systems, so there is little/no capacity to develop new systems)."] = "Lack of Staff"

df[df == "Communication challenges between teams (e.g., prices domain team struggles to communicate requirements with corporate IT)."] = "Cross-Domain Communication"

df[df == "Complexity within a system (e.g., managing complex code, managing large quantities of code)."] = "System Complexity"

df[df == "Human coordination/communication overhead (e.g., lots of people need to be involved with every decision)."] = "Too Much Coordination"

df[df == "We don't have a \"testing\" environment, so we have to be really confident that our changes are correct before testing them live in our production system."] = "No Testing Environment"

df[df == "None of these (we do not face any challenges)."] = "No Challenges"

df[df == "Lack of software tools (e.g., certain necessary software is not approved by corporate IT, a commercial software product cannot be procured)."] = "Insufficient Software"

df[df ==  "Verifying the correctness of data (e.g., input data often contains mistakes, significant time is spent negotiating error fixes with the data provider)."] = "Validating Data"

df[df == "Lack of hardware (e.g., the only device provided is a single work computer, and this device does not have enough CPU/memory/storage to work with large volumes of data)."] = "Insufficient Hardware"

df[df == "Verifying that a system behaves correctly (e.g., the price index calculation logic is correct)."] = "Verifying Correctness"

df[df == "Keeping track of which version of a system was used to produce a certain version of an output."] = "Version Control"

df[df == "Organizational politics (e.g., mandate conflicts between corporate IT and the prices domain team)."] = "Organizational Politics"

df[df == "Bureaucratic and process challenges (e.g., many \"approval\" steps are required to move work forward)."] = "Bureaucracy Challenges"


# Overlay all histograms on one plot
dat <- data.frame(
  Challenges = c(
    df$rank1,
    df$rank2,
    df$rank3,
    df$rank4,
    df$rank5
  ),
  Ranking = c(
    rep("Rank 1", each=nrow(df)),
    rep("Rank 2", each=nrow(df)),
    rep("Rank 3", each=nrow(df)),
    rep("Rank 4", each=nrow(df)),
    rep("Rank 5", each=nrow(df))
  )
)

# Replace empty string with NA
dat <- dat[dat$Challenges != "",]
dat <- dat[!is.na(dat$Challenges),]

ggplot(dat,aes(x=forcats::fct_infreq(Challenges), fill=Ranking)) +
  geom_bar(alpha=1, position="stack", color="black") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Challenges Faced (Rank 1 through 5)")
```

By far the most commonly cited challenge was "Lack of Staff". It is important to note that this reported challenge could be explained by any combination of (1) teams working at peak efficiency who are bottle necked by the number of individuals, or (2) teams where the same number of individuals could improve their efficiency if other challenges were alleviated (e.g., skills gaps, technology gaps, and so on).

The second most commonly cited challenge was "Lack of Skills" in the development and maintenance of CPI Production Systems. Given the technical, bespoke, and multidisciplinary nature of CPI Production Systems, there is probably a significant opportunity to bridge the skills gap by finding ways to facilitate knowledge sharing with domain experts.

Interestingly, managing the interaction between systems ("System Interactions") registered as the third most common challenge. Our suspicion is that most people who develop and maintain CPI Production Systems don't think extensively about how to integrate the outputs from one system into the inputs of another downstream system.

For example, if one analyst writes an R script that performs some data processing and writes an intermediate output to an `intermediate-table.RData` file, and a second analyst later discovers they can leverage that intermediate output in another system they are working on, it is unlikely that the second analyst will simply read the `intermediate-table.RData` file and it will seamlessly integrate with their system.

The more likely scenario is that the first analyst's output table will not be immediately compatible with the second analyst's system (e.g., column names don't match, data types for a primary key column don't match, the two analysts were using different semantics for the same concept, and so on)[^1].

In our experience, these kinds of system integration issues are usually small enough that they are resolved in an ad hoc manner. However, the accumulation of many ad hoc solutions over time can create significant [technical debt](https://en.wikipedia.org/wiki/Technical_debt) and lead to significant system interaction challenges.

Tied for fourth place are (1) complexity within a system (e.g., managing large quantities of code) and (2) verifying that a system behaves correctly. 

Maintaining large and complex code bases over time is an inherently challenging problem that requires years of practice. Our suspicion is that applying a relatively small number of relevant ideas from software engineering can lead to a significant reduction in the complexity of CPI Production Systems[^2]. However, we emphasize that mastering these concepts takes significant practice, even if the concepts are fairly straightforward at face value.

We were not surprised to learn that verifying system correctness registered as one of the top challenges due to the complexity of CPI Production Systems. While there are a large number of tools and techniques that can greatly facilitate the testing of software, being able to take advantage of these tools and techniques requires a minimum level of knowledge. Every major programming language comes with at least one comprehensive framework for automated testing. However, taking advantage of these frameworks require adopting certain idioms in order to integrate the testing framework into the code under test[^3]. In brief, very good solutions to this challenge exist, but they require a baseline level of programming skills to adopt in the first place.

As a final note, we were very surprised to see so few respondents identifying Version Control as a challenge. In @sec-tools-tech, the majority of respondents indicated that they either don't use a version control system at all, or they use file-naming conventions to version files. We are skeptical that these two facts are true at the same time.

Our suspicion is that the concept of learning how to use a tool like [Git](https://git-scm.com/) that exists specifically for the purpose of revision control is not something that many survey respondents considered until encountering it in the survey. We therefore suspect that respondents may have lumped revision control challenges with another type of challenge such as "Manual Tasks" or "System Complexity".

[^1]: The problem of passing data inputs from one system to another system has been around since the dawn of computing. However, the somewhat new concept of Data Contracts (see [Data Contract Specification](https://datacontract.com/) for example) try to address this problem in the context of passing complex structured data between data producers and data consumers.

[^2]: For example, adopting a few simple ideas such as grouping related functions into the same module or separating configuration information source code can lead to significant simplifications to code bases that don't currently leverage these ideas.

[^4]: For example, a 1,000 line Python script that performs multiple operations on a [Pandas](https://pandas.pydata.org/) data frame entirely in the global scope will not integrate nicely with a testing framework like [PyTest](https://docs.pytest.org/en/stable/). This is because there is no straightforward way to identify and group a section of the code to be run in a test. 