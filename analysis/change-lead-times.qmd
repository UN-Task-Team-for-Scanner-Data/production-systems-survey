# Lead Time {#sec-lead-time}

In this section, we ask questions about the [lead time](https://en.wikipedia.org/wiki/Lead_time) of (1) small and (2) large changes to CPI Production Systems.

In the context of software systems, lead time measures the time it takes for a committed code change to reach production, which reflects the efficiency of the software delivery process (@forsgren2018accelerate).

Given that we are looking at Complex Analytical Systems rather than traditional software systems in this survey (see @sec-why-run-this-survey), we modify this definition slightly to refer to the total amount of time required to get an end-to-end change to a CPI Production System implemented, which could include activities in addition to code implementation such as data analysis, methodology research, and discussions with data providers.

Lead time is generally regarded as a very important performance metric, and short lead times are generally considered better than long lead times[^1].

[^1]: One important point to note here is that short lead times are good as long as a certain minimum standard of quality is met. For instance, shorter lead times are not necessarily better if they are associated with a significant drop in the quality of the output.

We prompt the respondent with some examples of small and large changes before asking the lead time questions.

**Example of a small change:**

- A small piece of code in a system needs to be modified to update business logic for processing a particular data source.

- A new sheet needs to be added to an Excel Workbook to perform a new calculation in a system.

**Examples of a large change:**

- An entirely new methodology was recently discovered and needs to be introduced as one of the options in an elementary aggregate system.

- A system was previously ingesting survey data, but it now needs to also ingest retail scanner data.

## Lead Time (Small Changes)

Respondents are presented with the following question.

![Lead times for small changes](./diagrams/cpi-systems-lead-time-small.png)

```{r}
#| echo: false
#| warning: false

library(dplyr)
library(ggplot2)

# df[,199:203]  # how many individuals small change
# df[,204:208]  # how many individuals large change
# df[,209:213]  # lead time small change
# df[,214:218]  # lead time large change

df <- read.csv("./data/results.csv")
df <- df[df[,2] != "",]

df <- df |> rename(
  age_ing=colnames(df)[188],
  age_proc=colnames(df)[189],
  age_elem=colnames(df)[190],
  age_agg=colnames(df)[191],
  age_fin=colnames(df)[192],
  share_cpi_sys=colnames(df)[193],
  update_ing=colnames(df)[194],
  update_proc=colnames(df)[195],
  update_elem=colnames(df)[196],
  update_agg=colnames(df)[197],
  update_fin=colnames(df)[198]
)

systems_matrix <- function(row) {
  q1 <- matrix(nrow=5, ncol=5)
  q1[1,] <- as.numeric(obs[,67:71])
  q1[2,] <- as.numeric(obs[,72:76])
  q1[3,] <- as.numeric(obs[,77:81])
  q1[4,] <- as.numeric(obs[,82:86])
  q1[5,] <- as.numeric(obs[,87:91])
  
  q1[is.na(q1)] = 0
  
  q1
}

maintainer_matrix <- function(row) {
  q2 <- matrix(nrow=5, ncol=5)
  q2[1,] <- as.numeric(obs[,92:96])
  q2[2,] <- as.numeric(obs[,97:101])
  q2[3,] <- as.numeric(obs[,102:106])
  q2[4,] <- as.numeric(obs[,107:111])
  q2[5,] <- as.numeric(obs[,112:116])
  
  q2[is.na(q2)] = 0
  
  q2
}

# ---------------------
# Add a column to indicate whether the organization has a monolith
# ---------------------

df$has_monolith = FALSE

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # Define the monolith condition (i.e, there is only one system group that does
  # every GSBPM step).
  cit_idx <- all(as.logical(sys_grps[1,1:5])) |
             all(as.logical(sys_grps[2,1:5])) |
             all(as.logical(sys_grps[3,1:5])) |
             all(as.logical(sys_grps[4,1:5])) |
             all(as.logical(sys_grps[5,1:5])) 
  # If any system group is a monolith, add these counts to cumulative links and flag
  # this row as an organization that has at least one monolith.
  if (cit_idx & df[i, 15] != "No") {
    df[i, "has_monolith"] = TRUE
  }
}


# ---------------------
# Add a column to indicate whether the organization has a hybrid architecture
# ---------------------

df$has_hybrid_arch = FALSE

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # Define the hybrid architecture condition (at least one GSBPM step defined in groups 1 and 2, all else zero)
  cit_idx <- (sys_grps[1,1] == 1 | sys_grps[1,2] == 1 | sys_grps[1,3] == 1 | sys_grps[1,4] == 1 | sys_grps[1,5] == 1) &
             (sys_grps[2,1] == 1 | sys_grps[2,2] == 1 | sys_grps[2,3] == 1 | sys_grps[2,4] == 1 | sys_grps[2,5] == 1) &
              all(sys_grps[3:5, 1:5] == 0)
  # If there are two system groups **and** these groups are not monoliths, then
  # we consider these to be hybrid systems. The rationale here is that if a representative
  # system has 2 system groups and each system group is a monolith, then this isn't really
  # a hybrid system with a "boundary" between two groups.
  if (cit_idx & !df[i, "has_monolith"]) {
    df[i, "has_hybrid_arch"] = TRUE
  }
}

# ---------------------
# Add a column to indicate whether the organization has a "modular" architecture
# ---------------------

df$has_modular = FALSE

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # Define the modular architecture
  cit_idx <- (sys_grps[1,1] == 1 | sys_grps[1,2] == 1 | sys_grps[1,3] == 1 | sys_grps[1,4] == 1 | sys_grps[1,5] == 1) &
             (sys_grps[2,1] == 1 | sys_grps[2,2] == 1 | sys_grps[2,3] == 1 | sys_grps[2,4] == 1 | sys_grps[2,5] == 1) &
             (sys_grps[2,1] == 1 | sys_grps[2,2] == 1 | sys_grps[2,3] == 1 | sys_grps[2,4] == 1 | sys_grps[2,5] == 1)
  if (cit_idx & !df[i, "has_monolith"] & !df[i, "has_hybrid_arch"]) {
    df[i, "has_modular"] = TRUE
  }
}

# Any organization that doesn't fit one of the 3 definitions above is excluded
# because the answers are incomplete. Drop these records from the analysis
df <- df[df$has_monolith | df$has_hybrid_arch | df$has_modular, ]

# ---------------------
# Add a column to indicate whether the organization has stream aligned teams
# maintaining the representative system
# ---------------------

df$has_stream_aligned_team = FALSE

# This is the order of the maintainer columns
# c("Corporate IT", "Domain-Embedded IT", "Domain-Embedded Analysts", "Elsewhere Analysts", "Consultants")

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # Define the stream aligned team condition as one or more maintainer groups being comprised of either
  # domain-analysts only, domain-IT only, or both domain analysts and domain IT (but no other groups).
  idx <- (maintainers[1,1] == 0 & maintainers[1,4] == 0 & maintainers[1,5] == 0) & (maintainers[1,2] == 1 | maintainers[1,3] == 1) |
         (maintainers[2,1] == 0 & maintainers[2,4] == 0 & maintainers[2,5] == 0) & (maintainers[2,2] == 1 | maintainers[2,3] == 1) |
         (maintainers[3,1] == 0 & maintainers[3,4] == 0 & maintainers[3,5] == 0) & (maintainers[3,2] == 1 | maintainers[3,3] == 1) |
         (maintainers[4,1] == 0 & maintainers[4,4] == 0 & maintainers[4,5] == 0) & (maintainers[4,2] == 1 | maintainers[4,3] == 1) |
         (maintainers[5,1] == 0 & maintainers[5,4] == 0 & maintainers[5,5] == 0) & (maintainers[5,2] == 1 | maintainers[5,3] == 1)
  if (idx) {
    df[i, "has_stream_aligned_team"] = TRUE
  }
}

# ---------------------
# Add a column to indicate whether the organization has IT-only teams maintaining
# any of its representative systems
# ---------------------

df$has_it_only_team = FALSE

# This is the order of the maintainer columns
# c("Corporate IT", "Domain-Embedded IT", "Domain-Embedded Analysts", "Elsewhere Analysts", "Consultants")

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # Define the stream aligned team condition as one or more maintainer groups being comprised of either
  # domain-analysts only, domain-IT only, or both domain analysts and domain IT (but no other groups).
  idx <- (maintainers[1,3] == 0 & maintainers[1,4] == 0 & maintainers[1,5] == 0) & (maintainers[1,2] == 1 | maintainers[1,1] == 1) |
         (maintainers[2,3] == 0 & maintainers[2,4] == 0 & maintainers[2,5] == 0) & (maintainers[2,2] == 1 | maintainers[2,1] == 1) |
         (maintainers[3,3] == 0 & maintainers[3,4] == 0 & maintainers[3,5] == 0) & (maintainers[3,2] == 1 | maintainers[3,1] == 1) |
         (maintainers[4,3] == 0 & maintainers[4,4] == 0 & maintainers[4,5] == 0) & (maintainers[4,2] == 1 | maintainers[4,1] == 1) |
         (maintainers[5,3] == 0 & maintainers[5,4] == 0 & maintainers[5,5] == 0) & (maintainers[5,2] == 1 | maintainers[5,1] == 1)
  if (idx) {
    df[i, "has_it_only_team"] = TRUE
  }
}

# ---------------------
# Add a column to indicate whether the organization has analyst-only teams maintaining
# any of its representative systems
# ---------------------

df$has_analyst_only_team = FALSE

# This is the order of the maintainer columns
# c("Corporate IT", "Domain-Embedded IT", "Domain-Embedded Analysts", "Elsewhere Analysts", "Consultants")

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # Define the stream aligned team condition as one or more maintainer groups being comprised of either
  # domain-analysts only, domain-IT only, or both domain analysts and domain IT (but no other groups).
  idx <- (maintainers[1,1] == 0 & maintainers[1,2] == 0 & maintainers[1,5] == 0) & (maintainers[1,3] == 1 | maintainers[1,4] == 1) |
         (maintainers[2,1] == 0 & maintainers[2,2] == 0 & maintainers[2,5] == 0) & (maintainers[2,3] == 1 | maintainers[2,4] == 1) |
         (maintainers[3,1] == 0 & maintainers[3,2] == 0 & maintainers[3,5] == 0) & (maintainers[3,3] == 1 | maintainers[3,4] == 1) |
         (maintainers[4,1] == 0 & maintainers[4,2] == 0 & maintainers[4,5] == 0) & (maintainers[4,3] == 1 | maintainers[4,4] == 1) |
         (maintainers[5,1] == 0 & maintainers[5,2] == 0 & maintainers[5,5] == 0) & (maintainers[5,3] == 1 | maintainers[5,4] == 1)
  if (idx) {
    df[i, "has_analyst_only_team"] = TRUE
  }
}

# ---------------------
# Add a column to indicate whether the organization has "other" teams maintaining
# any of its representative systems
# ---------------------

df$has_other_mix_team = FALSE

# This is the order of the maintainer columns
# c("Corporate IT", "Domain-Embedded IT", "Domain-Embedded Analysts", "Elsewhere Analysts", "Consultants")

for (i in 1:nrow(df)) {
  obs <- df[i,]
  # Get matrix of system groups and maintainers
  sys_grps <- systems_matrix(obs)
  maintainers <- maintainer_matrix(obs)
  # An "Other" mix is anything that's not stream aligned, IT-only, or analyst-only.
  # Any organization that doesn't have any of the other team types is "other".
  if (!df[i, "has_stream_aligned_team"] & !df[i, "has_it_only_team"] & !df[i, "has_analyst_only_team"]) {
    df[i, "has_other_mix_team"] = TRUE
  }
}

Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

make_age_table <- function(df) {
    factor_df = as.data.frame(lapply(df[, c('age_ing', "age_proc", 'age_elem', 'age_agg', 'age_fin')], factor, levels=age_levels))
  mode_values = apply(factor_df, 1, Mode)
  
  mode_values[!is.na(mode_values)]
}

make_update_freq_table <- function(df) {
      factor_df = as.data.frame(lapply(df[, c('update_ing', "update_proc", 'update_elem', 'update_agg', 'update_fin')], factor, levels=update_levels))
  mode_values = apply(factor_df, 1, Mode)
  
  mode_values[!is.na(mode_values)]
}

# Define separate dfs for each architecture type and team type
monolith_df = df[df$has_monolith,]
hybrid_df = df[df$has_hybrid_arch,]
modular_df = df[df$has_modular,]


stream_aligned_df = df[df$has_stream_aligned_team,]
it_only_df = df[df$has_it_only_team,]
analyst_only_df = df[df$has_analyst_only_team,]
other_mix_df = df[df$has_other_mix_team,]


make_lead_times_sm_table <- function(df) {
  factor_df = as.data.frame(lapply(df[, c('lead_t_ing_sm', "lead_t_proc_sm", 'lead_t_elem_sm', 'lead_t_agg_sm', 'lead_t_fin_sm')], factor, levels=lead_time_levels))
  mode_values = apply(factor_df, 1, Mode)
  
  mode_values[!is.na(mode_values)]
}

df <- df |> rename(
  ind_ing_sm=colnames(df)[199],
  ind_proc_sm=colnames(df)[200],
  ind_elem_sm=colnames(df)[201],
  ind_agg_sm=colnames(df)[202],
  ind_fin_sm=colnames(df)[203],
  ind_ing_lg=colnames(df)[204],
  ind_proc_lg=colnames(df)[205],
  ind_elem_lg=colnames(df)[206],
  ind_agg_lg=colnames(df)[207],
  ind_fin_lg=colnames(df)[208],
  lead_t_ing_sm=colnames(df)[209],
  lead_t_proc_sm=colnames(df)[210],
  lead_t_elem_sm=colnames(df)[211],
  lead_t_agg_sm=colnames(df)[212],
  lead_t_fin_sm=colnames(df)[213],
  lead_t_ing_lg=colnames(df)[214],
  lead_t_proc_lg=colnames(df)[215],
  lead_t_elem_lg=colnames(df)[216],
  lead_t_agg_lg=colnames(df)[217],
  lead_t_fin_lg=colnames(df)[218],
)

# Define separate dfs for each architecture type and team type
monolith_df = df[df$has_monolith,]
hybrid_df = df[df$has_hybrid_arch,]
modular_df = df[df$has_modular,]

stream_aligned_df = df[df$has_stream_aligned_team,]
it_only_df = df[df$has_it_only_team,]
analyst_only_df = df[df$has_analyst_only_team,]
other_mix_df = df[df$has_other_mix_team,]

# Order of the factor variable
lead_time_levels = c("Within 1 day", "Within 1 week", "Within 1 month", "Within 3 months", "Within 1 year", "More than 1 year", "Too complex", "Can't be modified")
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| out-width: "100%"
#| fig-cap:
#| - Lead Time for Small Changes (Overall)
#| - Lead Time for Small Changes (Monolith)
#| - Lead Time for Small Changes (Modular)


overall_dat = make_lead_times_sm_table(df)
overall_dat = factor(overall_dat, levels=lead_time_levels)

# Suppress low count values
overall_dat <- overall_dat[overall_dat != "Within 3 months"]

ggplot() + aes(overall_dat)+ geom_bar(binwidth=1, colour="black", fill="white")

monolith_dat = make_lead_times_sm_table(monolith_df)

monolith_dat = factor(monolith_dat, levels=lead_time_levels)

# Suppress low count values
monolith_dat <- monolith_dat[monolith_dat != "Within 3 months"]

ggplot() + aes(monolith_dat)+ geom_bar(binwidth=1, colour="black", fill="white")


modular_dat = make_lead_times_sm_table(modular_df)
modular_dat = factor(modular_dat, levels=lead_time_levels)

# Suppress low count values
modular_dat <- modular_dat[modular_dat != "Within 3 months"]

ggplot() + aes(modular_dat)+ geom_bar(binwidth=1, colour="black", fill="white")
```

Overall, the majority of lead times for small changes are between 1 day and 1 week, with a minority of respondents indicating small changes happening within 3 months (i.e., 3 months or less).

Our expectation is that small changes of the magnitude we described in the question prompt should take teams at most a few days to implement, test, and integrate into production systems. We were a bit surprised to see a non-trivial fraction of the sample reporting lead times of "Within 1 month" or "Within 3 months" for small changes.

It is also noteworthy that NSOs with monolithic representative systems were more likely to report lead times for small changes of "Within 1 day", whereas NSOs with modular representative systems were more likely to report lead times for small changes of "Within 1 week".

Our hypothesis here is that, by definition, a modular representative system is more likely than a monolithic representative system to span two or more teams. Therefore, small changes may still need to be reviewed by a member on each team. It is reasonable that it might take more than one business day to find a time where the various team members are available to meet, so this alone could cause a small change to take more than one day.

In either case, our view is that "Within 1 day" and "Within 1 week" are both reasonable answers to this question.

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| out-width: "100%"
#| fig-cap:
#| - Lead Time for Small Changes (Stream-Aligned)
#| - Lead Time for Small Changes (IT-Only)
#| - Lead Time for Small Changes (Analyst-Only)
#| - Lead Time for Small Changes (Other Mix)

stream_aligned_dat = make_lead_times_sm_table(stream_aligned_df)
stream_aligned_dat = factor(stream_aligned_dat, levels=lead_time_levels)

# Suppress low count values
stream_aligned_dat <- stream_aligned_dat[stream_aligned_dat != "Within 3 months"]

ggplot() + aes(stream_aligned_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Small Changes (Stream-Aligned)")

it_only_dat = make_lead_times_sm_table(it_only_df)
it_only_dat = factor(it_only_dat, levels=lead_time_levels)

# Suppress low count values
it_only_dat <- it_only_dat[it_only_dat != "Within 3 months"]

ggplot() + aes(it_only_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Small Changes (IT-Only)")

analyst_only_dat = make_lead_times_sm_table(analyst_only_df)
analyst_only_dat = factor(analyst_only_dat, levels=lead_time_levels)

# Suppress low count values
analyst_only_dat <- analyst_only_dat[analyst_only_dat != "Within 3 months"]

ggplot() + aes(analyst_only_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Small Changes (Analyst-Only)")

other_mix_dat = make_lead_times_sm_table(other_mix_df)
other_mix_dat = factor(other_mix_dat, levels=lead_time_levels)

# Suppress low count values
other_mix_dat <- other_mix_dat[other_mix_dat != "Within 3 months" & other_mix_dat != "Within 1 day" & other_mix_dat != "Within 1 week"]

ggplot() + aes(other_mix_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Small Changes (Other Mix)")
```

With respect to team composition, Stream-Aligned teams, IT-Only teams, and Analyst-Only teams had lead time distributions that were close to the overall lead time distribution. The most common response for Other Mix teams is "Within 1 month", but the sample size for this team type is too small to conclude anything meaningful here.

## Lead Time (Large Changes)

Respondents are presented with the following question.

![Lead times for large changes](./diagrams/cpi-systems-lead-time-large.png)

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| out-width: "100%"
#| fig-cap:
#| - Lead Time for Large Changes (Overall)
#| - Lead Time for Large Changes (Monolith)
#| - Lead Time for Large Changes (Modular)

make_lead_times_lg_table <- function(df) {
  factor_df = as.data.frame(lapply(df[, c('lead_t_ing_lg', "lead_t_proc_lg", 'lead_t_elem_lg', 'lead_t_agg_lg', 'lead_t_fin_lg')], factor, levels=lead_time_levels))
  mode_values = apply(factor_df, 1, Mode)
  
  mode_values[!is.na(mode_values)]
}

# Overall
overall_dat = make_lead_times_lg_table(df)

overall_dat = factor(overall_dat, levels=lead_time_levels)

# Suppress low count values
overall_dat[overall_dat == "Too complex" | overall_dat == "Can't be modified"] = "Can't be modified"
overall_dat <- overall_dat[overall_dat != "Within 1 day"]

ggplot() + aes(overall_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Large Changes (Overall)")

# Monolith
monolith_dat = make_lead_times_lg_table(monolith_df)

monolith_dat = factor(monolith_dat, levels=lead_time_levels)

# Suppress low count values
monolith_dat[monolith_dat == "Too complex" | monolith_dat == "Can't be modified"] = "Can't be modified"
monolith_dat <- monolith_dat[monolith_dat != "Within 1 week" & monolith_dat != "Within 3 months" & monolith_dat != "Within 1 day"]


ggplot() + aes(monolith_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Large Changes (Monolith)")

# Modular

modular_dat = make_lead_times_lg_table(modular_df)
modular_dat = factor(modular_dat, levels=lead_time_levels)

# Suppress low count values
modular_dat[modular_dat == "Too complex" | modular_dat == "Can't be modified"] = "Can't be modified"
modular_dat <- modular_dat[modular_dat != "Within 1 year" & modular_dat != "More than 1 year"]

ggplot() + aes(modular_dat)+ geom_bar(binwidth=1, colour="black", fill="white") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(title="Lead Time for Large Changes (Modular)")
```

Overall, the lead time for large changes was very right skewed, with the most common response being that large changes happen "Within 1 month".

It is interesting that, unlike with small changes, NSOs with Monolithic representative systems are more likely to report lead times of "Within 1 year" or "More than 1 year", and they are also more likely to report an answer of "Too complex" or "Can't be modified"[^3].

[^3]: For confidentiality reasons, we grouped "Too complex" and "Can't be modified" into one category in the figures on this page.

This result is consistent with industry knowledge (@ford2021software, @richards2020fundamentals) as well as earlier findings in this report (e.g., sec-age). Monolithic systems are more likely to have components that are highly coupled (inter-connected) compared to modular systems. This high degree of coupling not only makes it more difficult to reason through changes to the system, but it also requires more rigorous testing to ensure that a large change doesn't break a seemingly unrelated component. Therefore, it is not surprising to observe that NSOs with monolithic representative systems are more likely to report higher lead times compared to NSOs with Modular representative systems.


```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2
#| out-width: "100%"
#| fig-cap:
#| - Lead Time for Small Changes (Stream-Aligned)
#| - Lead Time for Small Changes (IT-Only)
#| - Lead Time for Small Changes (Analyst-Only)
#| - Lead Time for Small Changes (Other Mix)

stream_aligned_dat = make_lead_times_lg_table(stream_aligned_df)
stream_aligned_dat = factor(stream_aligned_dat, levels=lead_time_levels)

# Suppress low count values
stream_aligned_dat <- stream_aligned_dat[stream_aligned_dat != "Within 1 day" & stream_aligned_dat != "Too complex"]

ggplot() + aes(stream_aligned_dat)+ geom_bar(binwidth=1, colour="black", fill="white")

it_only_dat = make_lead_times_lg_table(it_only_df)
it_only_dat = factor(it_only_dat, levels=lead_time_levels)

# Suppress low count values
it_only_dat <- it_only_dat[it_only_dat != "Within 1 year" & it_only_dat != "Too complex" & it_only_dat != "Can't be modified"]

ggplot() + aes(it_only_dat)+ geom_bar(binwidth=1, colour="black", fill="white")

analyst_only_dat = make_lead_times_lg_table(analyst_only_df)
analyst_only_dat = factor(analyst_only_dat, levels=lead_time_levels)

# Suppress low count values
analyst_only_dat <- analyst_only_dat[analyst_only_dat != "Within 1 year" & analyst_only_dat != "Too complex" & analyst_only_dat != "Can't be modified" & analyst_only_dat != "Within 1 day"]

ggplot() + aes(analyst_only_dat)+ geom_bar(binwidth=1, colour="black", fill="white")

other_mix_dat = make_lead_times_lg_table(other_mix_df)
other_mix_dat = factor(other_mix_dat, levels=c(lead_time_levels, "1 month to 1 year", "> 1 year or unmodifiable"))

# Suppress low count values
other_mix_dat[other_mix_dat == "Within 1 month" | other_mix_dat == "Within 3 months" | other_mix_dat == "Within 1 year"] = "1 month to 1 year"
other_mix_dat[other_mix_dat == "More than 1 year" | other_mix_dat == "Can't be modified"] = "> 1 year or unmodifiable"

ggplot() + aes(other_mix_dat)+ geom_bar(binwidth=1, colour="black", fill="white")
```

When looking at the distribution of lead times for large changes by team type, there are several noteworthy observations.

First, Stream-Aligned teams and Analyst-Only teams were more likely to report lead times of "Within 1 month" compared to any other answer. Stream-Aligned teams and Analyst-Only teams were a bit more likely to report shorter lead times compared to IT-Only teams, and were much more likely to report shorter lead times compared to Other Mix teams.

This finding is consistent with the work of @skelton2019team, which suggests that Stream-Aligned teams organized around an end-to-end slice of a particular business domain tend to move faster[^2].

It is also worth noting that "More than 1 year" is a somewhat common answer across **all** team types, suggesting that a fraction of NSOs probably struggle with high lead times for reasons other than team types.

We hypothesize that the lack of shared domain context in Other Mix teams could explain why their reported lead times are much higher than the other 3 team types. As discussed in @sec-age, the lack of a shared domain context increases communication overhead as all parties involved need to spend additional time bridging knowledge gaps. This extra communication overhead could extend each step of the system development process, leading to longer lead times overall.

[^2]: We are glossing over a lot of nuance here for simplicity. For readers who are interested in a more comprehensive overview of the work of @skelton2019team, we recommend reading the [Team Topologies Key Concepts](https://teamtopologies.com/key-concepts) page.